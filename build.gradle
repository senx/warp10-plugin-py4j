//
//   Copyright 2019-2023  SenX S.A.S.
//
//   Licensed under the Apache License, Version 2.0 (the "License");
//   you may not use this file except in compliance with the License.
//   You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
//   Unless required by applicable law or agreed to in writing, software
//   distributed under the License is distributed on an "AS IS" BASIS,
//   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//   See the License for the specific language governing permissions and
//   limitations under the License.
//

// Apply the java plugin to add support for Java
plugins {
  id 'com.github.johnrengelman.shadow' version '7.0.0'
  id 'io.codearte.nexus-staging' version '0.22.0'
  id 'java'
  id 'java-library'
  id 'idea'
  id 'eclipse'
  id 'maven-publish'
  id 'signing'
}

project.group = 'io.warp10'
project.description = 'Py4J plugin'

project.version = getVersionFromGit()
//
// Repositories for the project dependencies
//

repositories {
  mavenCentral()
}

configurations {
  provided
}

//
// Dependencies of the project
//
dependencies {
  compileOnly 'io.warp10:warpscript:2.10.1'

  // The production code uses the SLF4J logging API at compile time
  compileOnly 'org.slf4j:slf4j-api:1.7.13'

  // Declare the dependency for your favourite test framework you want to use in your tests.
  // TestNG is also supported by the Gradle Test task. Just change the
  // testCompile dependency to testCompile 'org.testng:testng:6.8.1' and add
  // 'test.useTestNG()' to your build script.

  testImplementation 'junit:junit:4.12'

  // https://mvnrepository.com/artifact/net.sf.py4j/py4j
  implementation group: 'net.sf.py4j', name: 'py4j', version: '0.10.8.1'

  //compile-only 'org.eclipse:org.eclipse.jetty'
  compileOnly 'org.eclipse.jetty:jetty-server:9.4.2.v20170220'
}

sourceSets {
  main {
    compileClasspath = compileClasspath + configurations.provided
  }
}

// for IntelliJ users
idea {
  module {
    scopes.PROVIDED.plus += [configurations.provided]
  }
}

// for Eclipse users
eclipse {
  classpath {
    plusConfigurations += [configurations.provided]
  }
}

java {
  withJavadocJar()
  withSourcesJar()
}

jar {
  manifest {
    attributes('WarpFleet-Description': project.description)
    attributes('WarpFleet-Group': project.group)
    attributes('WarpFleet-Artifact': project.name)
    attributes('WarpFleet-Version': project.version)
  }

  from('src/main/warpscript') {
    //
    // Only consider macros which are in our namespace
    //
    include project.group + '/' + project.name + '/*.mc2'
    include project.group + '/' + project.name + '/**/*.mc2'
  }

  from('.') {
    include 'README.md'
    include project.group + '-' + project.name + '.conf'
  }
}

shadowJar {
  classifier = ''

  manifest {
    attributes('WarpFleet-Description': project.description)
    attributes('WarpFleet-Group': project.group)
    attributes('WarpFleet-Artifact': project.name)
    attributes('WarpFleet-Version': project.version)
  }

  from('src/main/warpscript') {
    //
    // Only consider macros which are in our namespace
    //
    include project.group + '/' + project.name + '/*.mc2'
    include project.group + '/' + project.name + '/**/*.mc2'
  }

  from('.') {
    include 'README.md'
    include project.group + '-' + project.name + '.conf'
  }

  dependencies {
    exclude(dependency('org.slf4j::'))
  }
}

shadowJar.dependsOn(test)

//
// Maven related config
//
publishing {
  publications {
    maven(MavenPublication) {
      groupId project.group
      artifactId project.name
      version = project.version
      from components.java
      pom {
        name = project.name
        description = project.description
        url = 'https://github.com/senx/' + project.name

        scm {
          connection = 'scm:git:git://github.com/senx/' + project.name
          developerConnection = 'scm:git:ssh://github.com/senx/' + project.name
          url = 'https://github.com/senx/' + project.name
        }

        licenses {
          license {
            name = 'The Apache License, Version 2.0'
            url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
          }
        }

        developers {
          developer {
            id = 'senx'
            name = 'SenX'
            email = 'contact@senx.io'
          }
        }
      }
    }
    uberJar(MavenPublication) {
      groupId project.group
      artifactId project.name
      artifact(shadowJar)
      artifact(tasks['javadocJar'])
      artifact(tasks['sourcesJar'])
      version = project.version + '-uberjar'

      pom {
        name = project.name
        description = project.description
        url = 'https://github.com/senx/' + project.name

        scm {
          connection = 'scm:git:git://github.com/senx/' + project.name
          developerConnection = 'scm:git:ssh://github.com/senx/' + project.name
          url = 'https://github.com/senx/' + project.name
        }

        licenses {
          license {
            name = 'The Apache License, Version 2.0'
            url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
          }
        }

        developers {
          developer {
            id = 'senx'
            name = 'SenX'
            email = 'contact@senx.io'
          }
        }
      }
    }
  }

  repositories {
    if (project.hasProperty('ossrhUsername')) {
      maven {
        url 'https://oss.sonatype.org/service/local/staging/deploy/maven2/'
        credentials {
          username ossrhUsername
          password ossrhPassword
        }
      }
    }
    if (project.hasProperty('nexusUsername')) {
      maven {
        name 'nexus'
        allowInsecureProtocol true
        url "$nexusHost/repository/maven-releases/"
        credentials {
          username nexusUsername
          password nexusPassword
        }
      }
    }
  }
}

artifacts {
  archives shadowJar, javadocJar, sourcesJar
}

if (project.hasProperty('ossrhUsername')) {
  nexusStaging {
    packageGroup = 'io.warp10'
    username ossrhUsername
    password ossrhPassword
  }
}

//
// Artifact Signing
//
if (project.hasProperty('signing.gnupg.keyName')) {
  signing {
    useGpgCmd()
    sign publishing.publications
  }
}

def getVersionFromGit() {
  def nogit = System.getProperty("nogit")
  if (null != nogit) {
    // Override version with the property value. To remove the version altogether use '-Dnogit' without value.
    return nogit
  } else {
    def stdout = new ByteArrayOutputStream()
    exec {
      commandLine 'git', 'describe', '--tags', '--always'
      standardOutput = stdout
    }
    return stdout.toString().trim()
  }
}
